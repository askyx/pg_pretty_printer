

             $3 = MergePath T_MergeJoin (cost=142.69..534.51 rows=20808 parallel_aware=False parallel_safe=True parallel_workers=0) {skip_mark_restore: false, materialize_inner: false} = {
              jpath.path.parent = (b 1 2),
              jpath.path.pathtarget = PathTarget {cost: (0.00..0.00), width: 24, has_volatile_expr: VOLATILITY_UNKNOWN} = {
                exprs = List with 6 elements = {
                  0 = Var {varno: 1, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 1, location: 23},
                  1 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 23},
                  2 = Var {varno: 1, varattno: 3, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 3, location: 23},
                  3 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 23},
                  4 = Var {varno: 2, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 2, location: 23},
                  5 = Var {varno: 2, varattno: 3, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 3, location: 23}
                },
                sortgrouprefs = 0
              },
              jpath.outerjoinpath = IndexPath T_IndexScan (cost=0.15..74.75 rows=2040 parallel_aware=False parallel_safe=True parallel_workers=0) {indexscandir: ForwardScanDirection, indextotalcost: 14.352500000000001, indexselectivity: 1.0000} = {
                path.parent = (b 1),
                path.pathtarget = PathTarget {cost: (0.00..0.00), width: 12, has_volatile_expr: VOLATILITY_NOVOLATILE} = {
                  exprs = List with 3 elements = {
                    0 = Var {varno: 1, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 1, location: 23},
                    1 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 23},
                    2 = Var {varno: 1, varattno: 3, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 3, location: 23}
                  }
                },
                path.pathkeys = List with 1 elements = {
                  0 = PathKey {pk_opfamily: 1976, pk_strategy: 1, pk_nulls_first: false} = {
                    pk_eclass = EquivalenceClass {ec_collation: 0, ec_relids: {}, ec_has_const: false, ec_has_volatile: false, ec_broken: false, ec_sortref: 0, ec_min_security: 0, ec_max_security: 0} = {
                      ec_opfamilies = OidList with 1 elements = {1976},
                      ec_members = List with 2 elements = {
                        0 = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                          em_jdomain = JoinDomain jd_relids: {}
                        },
                        1 = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                          em_jdomain = JoinDomain jd_relids: {}
                        }
                      },
                      ec_sources = List with 1 elements = {
                        0 = RestrictInfo {is_pushed_down: true, can_join: true, pseudoconstant: false, has_clone: false, is_clone: false, leakproof: false, has_volatile: VOLATILITY_NOVOLATILE, security_level: 0, num_base_rels: 2, clause_relids: {}, required_relids: {}, incompatible_relids: {}, outer_relids: {}, left_relids: {}, right_relids: {}, rinfo_serial: 1, eval_cost: (-1.00..0.00), norm_selec: -1.0000, outer_selec: -1.0000, outer_is_left: false, hashjoinoperator: 0, left_bucketsize: -1.0000, right_bucketsize: -1.0000, left_mcvfreq: -1.0000, right_mcvfreq: -1.0000, left_hasheqoperator: 0, right_hasheqoperator: 0} = {
                          clause = OpExpr {opno: 96, opfuncid: 65, opresulttype: 16, opretset: false, opcollid: 0, inputcollid: 0, location: 49} = {
                            args = List with 2 elements = {
                              0 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                              1 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51}
                            }
                          },
                          mergeopfamilies = OidList with 1 elements = {1976},
                          left_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                            em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                            em_jdomain = JoinDomain jd_relids: {}
                          },
                          right_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                            em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                            em_jdomain = JoinDomain jd_relids: {}
                          }
                        }
                      },
                      ec_derives = List with 1 elements = {
                        0 = RestrictInfo {is_pushed_down: true, can_join: true, pseudoconstant: false, has_clone: false, is_clone: false, leakproof: false, has_volatile: VOLATILITY_NOVOLATILE, security_level: 0, num_base_rels: 2, clause_relids: {}, required_relids: {}, incompatible_relids: {}, outer_relids: {}, left_relids: {}, right_relids: {}, rinfo_serial: 2, eval_cost: (0.00..0.00), norm_selec: 0.0050, outer_selec: -1.0000, outer_is_left: false, hashjoinoperator: 96, left_bucketsize: 0.1000, right_bucketsize: 0.1000, left_mcvfreq: 0.0000, right_mcvfreq: 0.0000, left_hasheqoperator: 96, right_hasheqoperator: 96} = {
                          clause = OpExpr {opno: 96, opfuncid: 65, opresulttype: 16, opretset: false, opcollid: 0, inputcollid: 0, location: -1} = {
                            args = List with 2 elements = {
                              0 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                              1 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51}
                            }
                          },
                          mergeopfamilies = OidList with 1 elements = {1976},
                          left_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                            em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                            em_jdomain = JoinDomain jd_relids: {}
                          },
                          right_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                            em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                            em_jdomain = JoinDomain jd_relids: {}
                          }
                        }
                      }
                    }
                  }
                },
                indexinfo = IndexOptInfo {indexoid: 197618, reltablespace: 0, pages: 1, tuples: 2040, tree_height: 0, ncolumns: 1, nkeycolumns: 1, relam: 403, predOK: false, unique: false, immediate: true, hypothetical: false, amcanorderbyop: false, amoptionalkey: true, amsearcharray: true, amsearchnulls: true, amhasgettuple: true, amhasgetbitmap: true, amcanparallel: true, amcanmarkpos: true} = {
                  indexkeys = 2,
                  indexcollations = 0,
                  opfamily = 1976,
                  opcintype = 23,
                  sortopfamily = 1976,
                  reverse_sort = false,
                  nulls_first = false,
                  canreturn = true,
                  indextlist = List with 1 elements = {
                    0 = TargetEntry {resno: 1, resname: 0x0, ressortgroupref: 0, resorigtbl: 0, resorigcol: 0, resjunk: false} = {
                      expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: -1}
                    }
                  }
                }
              },
              jpath.innerjoinpath = T_SeqScan (cost=0.00..30.40 rows=2040 parallel_aware=False parallel_safe=True parallel_workers=0) = {
                parent = (b 2),
                pathtarget = PathTarget {cost: (0.00..0.00), width: 12, has_volatile_expr: VOLATILITY_UNKNOWN} = {
                  exprs = List with 3 elements = {
                    0 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 23},
                    1 = Var {varno: 2, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 2, location: 23},
                    2 = Var {varno: 2, varattno: 3, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 3, location: 23}
                  }
                }
              },
              jpath.joinrestrictinfo = List with 1 elements = {
                0 = RestrictInfo {is_pushed_down: true, can_join: true, pseudoconstant: false, has_clone: false, is_clone: false, leakproof: false, has_volatile: VOLATILITY_NOVOLATILE, security_level: 0, num_base_rels: 2, clause_relids: {}, required_relids: {}, incompatible_relids: {}, outer_relids: {}, left_relids: {}, right_relids: {}, rinfo_serial: 2, eval_cost: (0.00..0.00), norm_selec: 0.0050, outer_selec: -1.0000, outer_is_left: false, hashjoinoperator: 96, left_bucketsize: 0.1000, right_bucketsize: 0.1000, left_mcvfreq: 0.0000, right_mcvfreq: 0.0000, left_hasheqoperator: 96, right_hasheqoperator: 96} = {
                  clause = OpExpr {opno: 96, opfuncid: 65, opresulttype: 16, opretset: false, opcollid: 0, inputcollid: 0, location: -1} = {
                    args = List with 2 elements = {
                      0 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                      1 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51}
                    }
                  },
                  mergeopfamilies = OidList with 1 elements = {1976},
                  left_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                    em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                    em_jdomain = JoinDomain jd_relids: {}
                  },
                  right_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                    em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                    em_jdomain = JoinDomain jd_relids: {}
                  }
                }
              },
              innersortkeys = List with 1 elements = {
                0 = PathKey {pk_opfamily: 1976, pk_strategy: 1, pk_nulls_first: false} = {
                  pk_eclass = EquivalenceClass {ec_collation: 0, ec_relids: {}, ec_has_const: false, ec_has_volatile: false, ec_broken: false, ec_sortref: 0, ec_min_security: 0, ec_max_security: 0} = {
                    ec_opfamilies = OidList with 1 elements = {1976},
                    ec_members = List with 2 elements = {
                      0 = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                        em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                        em_jdomain = JoinDomain jd_relids: {}
                      },
                      1 = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                        em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                        em_jdomain = JoinDomain jd_relids: {}
                      }
                    },
                    ec_sources = List with 1 elements = {
                      0 = RestrictInfo {is_pushed_down: true, can_join: true, pseudoconstant: false, has_clone: false, is_clone: false, leakproof: false, has_volatile: VOLATILITY_NOVOLATILE, security_level: 0, num_base_rels: 2, clause_relids: {}, required_relids: {}, incompatible_relids: {}, outer_relids: {}, left_relids: {}, right_relids: {}, rinfo_serial: 1, eval_cost: (-1.00..0.00), norm_selec: -1.0000, outer_selec: -1.0000, outer_is_left: false, hashjoinoperator: 0, left_bucketsize: -1.0000, right_bucketsize: -1.0000, left_mcvfreq: -1.0000, right_mcvfreq: -1.0000, left_hasheqoperator: 0, right_hasheqoperator: 0} = {
                        clause = OpExpr {opno: 96, opfuncid: 65, opresulttype: 16, opretset: false, opcollid: 0, inputcollid: 0, location: 49} = {
                          args = List with 2 elements = {
                            0 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                            1 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51}
                          }
                        },
                        mergeopfamilies = OidList with 1 elements = {1976},
                        left_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                          em_jdomain = JoinDomain jd_relids: {}
                        },
                        right_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                          em_jdomain = JoinDomain jd_relids: {}
                        }
                      }
                    },
                    ec_derives = List with 1 elements = {
                      0 = RestrictInfo {is_pushed_down: true, can_join: true, pseudoconstant: false, has_clone: false, is_clone: false, leakproof: false, has_volatile: VOLATILITY_NOVOLATILE, security_level: 0, num_base_rels: 2, clause_relids: {}, required_relids: {}, incompatible_relids: {}, outer_relids: {}, left_relids: {}, right_relids: {}, rinfo_serial: 2, eval_cost: (0.00..0.00), norm_selec: 0.0050, outer_selec: -1.0000, outer_is_left: false, hashjoinoperator: 96, left_bucketsize: 0.1000, right_bucketsize: 0.1000, left_mcvfreq: 0.0000, right_mcvfreq: 0.0000, left_hasheqoperator: 96, right_hasheqoperator: 96} = {
                        clause = OpExpr {opno: 96, opfuncid: 65, opresulttype: 16, opretset: false, opcollid: 0, inputcollid: 0, location: -1} = {
                          args = List with 2 elements = {
                            0 = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                            1 = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51}
                          }
                        },
                        mergeopfamilies = OidList with 1 elements = {1976},
                        left_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 1, varattno: 2, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 1, varattnosyn: 2, location: 44},
                          em_jdomain = JoinDomain jd_relids: {}
                        },
                        right_em = EquivalenceMember {em_relids: {}, em_is_const: false, em_is_child: false, em_datatype: 23} = {
                          em_expr = Var {varno: 2, varattno: 1, vartype: 23, vartypmod: -1, varcollid: 0, varnullingrels: 0x0, varlevelsup: 0, varnosyn: 2, varattnosyn: 1, location: 51},
                          em_jdomain = JoinDomain jd_relids: {}
                        }
                      }
                    }
                  }
                }
              }
            }
              


               p * best_path->parent->relids



    def add_to_list(self, arg):
        k = arg.split('.')
        v = reduce(operator.getitem, k, self.val)
        if str(v) != '0x0':
            if re.search('parent', arg):
                return (arg, v['relids'].dereference())
            else:
                return (arg, v.dereference())